/*
 * Copyright (c) 2015-2016, Thomas Keh
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *    3. Neither the name of the copyright holder nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
#include "entry_publisher.h"
#include "utils.h"
#include "logger.h"
#include "ros/ros.h"

// generated by catkin
#include "KaCanOpen_ros/entry_data.h"

#include <string>
#include <sstream>
#include <algorithm>

namespace kaco {

EntryPublisher::EntryPublisher(Device& device, std::string entry_name,
			uint8_t array_index, ReadAccessMethod access_method)
    : m_device(device), m_entry_name(entry_name), m_array_index(array_index), m_access_method(access_method)
	{

		uint8_t node_id = device.get_node_id();
		ros::NodeHandle nh;

		// no spaces and '-' allowed in ros names
		std::string name = "device" + std::to_string(node_id) + "/" + entry_name;
		std::transform(name.begin(), name.end(), name.begin(), ::tolower);
		std::replace(name.begin(), name.end(), ' ', '_');
		std::replace(name.begin(), name.end(), '-', '_');

		DEBUG_LOG("Publishing "<<name);
        publisher = nh.advertise<KaCanOpen_ros::entry_data>(name, 100);

    }

void EntryPublisher::publish() {

	// we represent any value as string
	Value value = m_device.get_entry(m_entry_name, m_array_index, m_access_method);
	std::stringstream ss;
	ss << value;

	KaCanOpen_ros::entry_data msg;
	msg.type = Utils::type_to_string(value.type);
	msg.value = ss.str();
    publisher.publish(msg);
}

} // end namespace kaco